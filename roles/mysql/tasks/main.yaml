---
- name: Install MySql
  ansible.builtin.apt:
    name:
      - mysql-server
      - python3-pymysql
      - prometheus-mysqld-exporter
    state: present

- name: Override Default Bind-Addr
  ansible.builtin.template:
    src: override.cnf.j2
    dest: /etc/mysql/mysql.conf.d/override.cnf
  notify: Restart MySql service

- name: Flush mysql handlers
  ansible.builtin.meta: flush_handlers

- name: Create a new database with name 'agama'
  community.mysql.mysql_db:
    name: "{{ mysql_database }}"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica

- name: Create a new user with name 'agama'
  community.mysql.mysql_user:
    name: "{{ mysql_user }}"
    password: "{{ mysql_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:ALL"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: yes

- name: Create a new user with name 'exporter'
  community.mysql.mysql_user:
    name: "{{ exporter_user }}"
    password: "{{ exporter_password }}"
    priv: "*.*:PROCESS,REPLICATION CLIENT,SELECT"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: yes

- name: Create a new user with name 'replication'
  community.mysql.mysql_user:
    name: "{{ replication_user }}"
    password: "{{ replication_password }}"
    host: "%"
    priv: "*.*:REPLICATION SLAVE"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: yes

- name: Configure my.cnf
  ansible.builtin.template:
    src: my.cnf.j2
    dest: /var/lib/prometheus/.my.cnf
  no_log: yes
  notify: Restart MySql service

- name: Ensure that Mysql and it's exporter service are started and enabled
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
    enabled: true
  loop:
    - mysql
    - prometheus-mysqld-exporter

- name: Create a backup directory
  ansible.builtin.file:
    path: /home/backup/mysql
    state: directory
    owner: backup

- name: Add user named 'backup' to mysql
  community.mysql.mysql_user:
    name: "{{ backup_user }}"
    password: "{{ backup_user_password }}"
    host: "%"
    priv: "{{ mysql_database }}.*:SELECT,LOCK TABLES"
    login_unix_socket: /var/run/mysqld/mysqld.sock
  no_log: yes

- name: Add my.cnf conf for user backup
  ansible.builtin.template:
    src: backup.my.cnf.j2
    dest: /home/backup/.my.cnf
    mode: "0600"
    owner: backup
  notify: Restart MySql service
  no_log: yes

- name: Configure cron for backups
  ansible.builtin.cron:
    name: sql dump for agama
    user: backup
    minute: "*/5"
    job: "mysqldump agama > /home/backup/mysql/agama.sql"
    cron_file: mysql-backup

- name: Turn on Read only on the slave node
  community.mysql.mysql_variables:
    variable: read_only
    value: "{{ 'OFF' if inventory_hostname == mysql_host else 'ON' }}"
    mode: persist
    login_unix_socket: /var/run/mysqld/mysqld.sock
  notify:
    - Reset MySQL source
    - Reset MySQL replica

- name: Add a weekly backup upload cron job
  ansible.builtin.cron:
    name: "MySQL Weekly Backup"
    minute: "0"
    hour: "*"
    day: "*"
    month: "*"
    weekday: "0"
    job: "duplicity --no-encryption full /home/backup/mysql/ rsync://katuul@backup.{{ domain_name }}/mysql"
    user: "backup"
  when: inventory_hostname == 'mysql_backup_host'
